{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","Components/ErrorBoundry.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","Component","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2OAiBgBA,EAfH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAEzB,OAEE,yBAAKC,UAAU,oDACd,yBAAKC,IAAI,SAAQC,IAAG,+BAA2BH,EAA3B,cACpB,6BACC,4BAAKF,GACL,2BAAIC,MCcMK,EArBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAGlB,OACC,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCAPW,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKX,UAAY,OAChB,2BACCA,UAAW,mCACXY,KAAO,SACPC,YAAY,gBACZC,SAAUH,MCCCI,EARA,SAACC,GACf,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCmDIC,GCtDYC,Y,kBDOzB,aAAc,IAAD,8BACX,+CAcFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAChB,YAAae,EAAME,OAAOC,SAdzC,EAAKC,MAAQ,CACTzB,OAAQ,GACRM,YAAa,IAJN,E,iFAQO,IAAD,OACjBoB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKR,SAAS,CAACtB,OAAQ8B,S,+BAU7B,IAAD,EACqBC,KAAKN,MAAzBzB,EADD,EACCA,OAAOM,EADR,EACQA,YACR0B,EAAiBhC,EAAOiC,QAAO,SAAAjC,GACnC,OAAOA,EAAOP,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAGxD,OAAQlC,EAAOoC,OAKb,yBAAKxC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACF,kBAAC,EAAD,CAAWW,aAAcwB,KAAKX,iBAC9B,kBAAC,EAAD,KAEA,kBAAC,EAAD,CAAUpB,OAAQgC,MATlB,wBAAIpC,UAAU,MAAd,e,GA7BYuB,cEIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACEC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9b2bfac0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name,email,id}) =>{\n\n\treturn(\n\n\t\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t\t<img alt='robots'src ={`https://robohash.org/${id}?200x200`} />\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t\t<p>{email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\n\t}\n\n\texport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n\n\n\treturn(\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user,i) =>{\n\t\t\t\treturn (\n\t\t\t\t\t<Card \n\t\t\t\t\tkey={i} \n\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\temail={robots[i].email}/>\n\t\t\t\t\t);\n\t\t\t\t})\n\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\treturn(\n\t\t<div className = 'pa2'>\n\t\t\t<input \n\t\t\t\tclassName ='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype = 'search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n\t\t\t\t{props.children}\n\t\t\t</div>\n\t\t);\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n        robots: [],\n        searchfield: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users=>this.setState({robots: users}));\n    \n  }\n\n  onSearchChange = (event) =>{\n    this.setState({searchfield: event.target.value})\n    \n    \n  }\n\n  render(){\n    const {robots,searchfield}=this.state;\n    const filteredRobots = robots.filter(robots =>{\n      return robots.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n\n    return !robots.length ?\n      <h1 className='tc'>Loading</h1>:\n    \n  (\n\n      <div className='tc'>\n        <h1 className='f1'>Robofriends</h1>\n      <SearchBox searchChange={this.onSearchChange}/>\n      <Scroll>\n      \n      <CardList robots={filteredRobots} />\n\n      </Scroll>\n      </div>\n    );\n    \n  }\n}\n\n\nexport default App;\n","import  React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error,info){\n\t\tthis.setState({hasError: true})\n\t}\n\nrender() {\n\t\tif (this.state.hasError){\n\t\t\treturn <h1>Oops. That is not good</h1>\n\t\t}\n\t}\n}\n\nexport default ErrorBoundry;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots';\n\nReactDOM.render(\n\t\t<App />\n\t\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}